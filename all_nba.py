# -*- coding: utf-8 -*-
"""Another copy of nba.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w-ttW8rV-zxqmB3muoXCTEUg8P0I_bAO
"""

import numpy as np
import pandas as pd
import requests
import random
import time
from io import StringIO

teams = [
    'ATL', 'BOS', 'BRK', 'CHO', 'CHI', 'DAL', 'DEN', 'DET', 'GSW', 'HOU',
    'CLE', 'IND', 'LAC', 'LAL', 'MEM', 'MIA', 'MIL', 'MIN', 'NOP', 'NYK',
    'OKC', 'ORL', 'PHI', 'PHO', 'POR', 'SAC', 'SAS', 'TOR', 'UTA', 'WAS'
]

team_dict ={
    'ATL': 'Atlanta Hawks',
    'BOS': 'Boston Celtics',
    'BRK': 'Brooklyn Nets',
    'CHO': 'Charlotte Hornets',
    'CHI': 'Chicago Bulls',
    'CLE': 'Cleveland Cavaliers',
    'DAL': 'Dallas Mavericks',
    'DEN': 'Denver Nuggets',
    'DET': 'Detroit Pistons',
    'GSW': 'Golden State Warriors',
    'HOU': 'Houston Rockets',
    'IND': 'Indiana Pacers',
    'LAC': 'Los Angeles Clippers',
    'LAL': 'Los Angeles Lakers',
    'MEM': 'Memphis Grizzlies',
    'MIA': 'Miami Heat',
    'MIL': 'Milwaukee Bucks',
    'MIN': 'Minnesota Timberwolves',
    'NOP': 'New Orleans Pelicans',
    'NYK': 'New York Knicks',
    'OKC': 'Oklahoma City Thunder',
    'ORL': 'Orlando Magic',
    'PHI': 'Philadelphia 76ers',
    'PHO': 'Phoenix Suns',
    'POR': 'Portland Trail Blazers',
    'SAC': 'Sacramento Kings',
    'SAS': 'San Antonio Spurs',
    'TOR': 'Toronto Raptors',
    'UTA': 'Utah Jazz',
    'WAS': 'Washington Wizards'
}

seasons =['2019','2020','2021','2022','2023','2024']
#len(seasons)
#print(seasons)

for season in seasons:
  print(season)

# Create an empty DataFrame to append
nba_df = pd.DataFrame()

# Iterate through seasons and teams
for season in seasons:
    for team in teams:

        # Set up URL
        url = f'https://www.basketball-reference.com/teams/{team}/{season}/gamelog-advanced/'
        print(url)

        response = requests.get(url, headers={'User-agent': 'Mozilla/5.0'})
        visible_html = response.text.replace('<!--', '').replace('-->', '')

        try:
            df_list = pd.read_html(StringIO(visible_html), header=1)
            if len(df_list) > 1:
                # If playoffs exist, concatenate regular season and playoff data
                df_list[1]['G'] = df_list[1]['G'] + 82  # Offset playoff games
                team_df = pd.concat([df_list[0], df_list[1]], ignore_index=True)
            else:
                team_df = df_list[0]

            # Clean and process DataFrame
            team_df = team_df.dropna(subset=['G'])  # Drop rows where 'G' is NaN
            team_df = team_df[team_df['G'] != 'G']  # Remove header rows
            team_df = team_df.iloc[:, 1:11]  # Keep columns 1 to 11
            team_df = team_df.rename(columns={'Unnamed: 3': 'At', 'Tm': 'OPts', 'Opp.1': 'DPts'})

            # Add computed columns
            team_df['At'] = team_df['At'].apply(lambda x: x if x == '@' else "")
            team_df['Win'] = team_df['W/L'].apply(lambda x: 1 if x == 'W' else 0)
            team_df['Location'] = team_df['At'].apply(lambda x: 'Away' if x == '@' else 'Home')
            team_df.insert(loc =6 , column= 'Location', value=team_df.pop('Location'))
            team_df['Opp_Name'] = team_df['Opp'].apply(lambda x: team_dict.get(x, 'Unknown'))
            team_df.insert(loc =8 , column= 'Opp_Name', value=team_df.pop('Opp_Name'))

            # Insert additional columns
            team_df.insert(0, 'Season', season)
            team_df.insert(2, 'Team', team)
            team_df.insert(3, 'Name', team_dict[team])

            # Append to aggregate DataFrame
            nba_df = pd.concat([nba_df, team_df], ignore_index=True)

        except Exception as e:
            print(f"Failed to process {team} in {season}: {e}")

        # Pause to abide by site rules
        time.sleep(random.randint(4, 6))

# Display the aggregate DataFrame
print(nba_df.shape)

nba_df

# Update datatypes
nba_df['G'] = nba_df['G'].astype('int')
nba_df['OPts'] = nba_df['OPts'].astype('int')
nba_df['DPts'] = nba_df['DPts'].astype('int')
nba_df['ORtg'] = nba_df['ORtg'].astype('float')
nba_df['DRtg'] = nba_df['DRtg'].astype('float')
nba_df['Pace'] = nba_df['Pace'].astype('float')

print(nba_df.info())
(nba_df.head())

nba_df.to_csv('nba_advanced_2019-2024_data.csv', index=False)









